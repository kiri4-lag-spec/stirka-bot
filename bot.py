import os
import sqlite3
import logging
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

BOT_TOKEN = os.environ.get('BOT_TOKEN', "8257155005:AAHfpnulJs_caIfE4zGZtxPvcJKZdXqM0-E")
DB_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'laundry.db')

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

def init_db():
    try:
        print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER UNIQUE,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS bookings (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                machine_type TEXT NOT NULL,
                date TEXT NOT NULL,
                time_slot TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id),
                UNIQUE(machine_type, date, time_slot)
            )
        ''')
        
        conn.commit()
        conn.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
        raise

def get_db_connection():
    return sqlite3.connect(DB_PATH)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute(
        'INSERT OR IGNORE INTO users (user_id, username, first_name, last_name) VALUES (?, ?, ?, ?)',
        (user.id, user.username, user.first_name, user.last_name)
    )
    conn.commit()
    conn.close()
    
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n"
        "–Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å—Ç–∏—Ä–∫—É.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—à–∏–Ω—ã:\n"
        "üßº –ù–æ–≤–∞—è 1\n" 
        "üßº –ù–æ–≤–∞—è 2\n"
        "üßº –°—Ç–∞—Ä–∞—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:"
    )
    
    keyboard = [
        [InlineKeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data='view_schedule')],
        [InlineKeyboardButton("‚ûï –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data='choose_machine')],
        [InlineKeyboardButton("üëÄ –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data='my_bookings')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.message:
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    else:
        await update.callback_query.edit_message_text(welcome_text, reply_markup=reply_markup)

async def show_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    today = datetime.now().strftime("%Y-%m-%d")
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT machine_type, time_slot, u.first_name 
        FROM bookings b 
        LEFT JOIN users u ON b.user_id = u.user_id 
        WHERE date = ?
        ORDER BY machine_type, time_slot
    ''', (today,))
    
    bookings = cursor.fetchall()
    conn.close()
    
    schedule_text = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({today}):\n\n"
    machines = {"–ù–æ–≤–∞—è 1": [], "–ù–æ–≤–∞—è 2": [], "–°—Ç–∞—Ä–∞—è": []}
    
    for machine, time_slot, user_name in bookings:
        machines[machine].append(f"{time_slot} - {user_name or '–ê–Ω–æ–Ω–∏–º'}")
    
    for machine in ["–ù–æ–≤–∞—è 1", "–ù–æ–≤–∞—è 2", "–°—Ç–∞—Ä–∞—è"]:
        schedule_text += f"üßº {machine} –º–∞—à–∏–Ω–∞:\n"
        if machines[machine]:
            for booking in machines[machine]:
                schedule_text += f"  ‚è∞ {booking}\n"
        else:
            schedule_text += "  ‚úÖ –°–≤–æ–±–æ–¥–Ω–æ\n"
        schedule_text += "\n"
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data='choose_machine')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(schedule_text, reply_markup=reply_markup)

async def choose_machine(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üßº –ù–æ–≤–∞—è 1", callback_data="book_new1")],
        [InlineKeyboardButton("üßº –ù–æ–≤–∞—è 2", callback_data="book_new2")],
        [InlineKeyboardButton("üßº –°—Ç–∞—Ä–∞—è", callback_data="book_old")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏—Ä–∞–ª—å–Ω—É—é –º–∞—à–∏–Ω—É:", reply_markup=reply_markup)

async def handle_booking_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    choice = query.data
    if choice == "book_new1":
        await show_time_slots(query, "–ù–æ–≤–∞—è 1")
    elif choice == "book_new2":
        await show_time_slots(query, "–ù–æ–≤–∞—è 2")
    elif choice == "book_old":
        await show_time_slots(query, "–°—Ç–∞—Ä–∞—è")

async def show_time_slots(query, machine_type):
    today = datetime.now()
    time_slots = []
    
    for day in range(3):
        current_date = today + timedelta(days=day)
        date_str = current_date.strftime("%Y-%m-%d")
        for hour in range(8, 22):
            time_slot = f"{hour:02d}:00"
            time_slots.append((date_str, time_slot))
    
    keyboard = []
    for i, (date, time_slot) in enumerate(time_slots):
        date_display = "–°–µ–≥–æ–¥–Ω—è" if date == today.strftime("%Y-%m-%d") else \
                      "–ó–∞–≤—Ç—Ä–∞" if date == (today + timedelta(days=1)).strftime("%Y-%m-%d") else \
                      "–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞"
        
        callback_data = f"confirm_{machine_type}_{date}_{time_slot}"
        button_text = f"{date_display} {time_slot}"
        
        if i % 2 == 0:
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        else:
            keyboard[-1].append(InlineKeyboardButton(button_text, callback_data=callback_data))
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='choose_machine')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    machine_text = {
        "–ù–æ–≤–∞—è 1": "–ù–æ–≤–æ–π 1 –º–∞—à–∏–Ω—ã",
        "–ù–æ–≤–∞—è 2": "–ù–æ–≤–æ–π 2 –º–∞—à–∏–Ω—ã", 
        "–°—Ç–∞—Ä–∞—è": "–°—Ç–∞—Ä–æ–π –º–∞—à–∏–Ω—ã"
    }[machine_type]
    
    await query.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è {machine_text}:", reply_markup=reply_markup)

async def confirm_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    parts = query.data.split("_")
    machine_type = parts[1]
    date = parts[2]
    time_slot = parts[3]
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    try:
        cursor.execute(
            'INSERT INTO bookings (user_id, machine_type, date, time_slot) VALUES (?, ?, ?, ?)',
            (query.from_user.id, machine_type, date, time_slot)
        )
        conn.commit()
        
        date_display = "–°–µ–≥–æ–¥–Ω—è" if date == datetime.now().strftime("%Y-%m-%d") else \
                      "–ó–∞–≤—Ç—Ä–∞" if date == (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%d") else \
                      "–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞"
        
        success_text = f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ {machine_type.lower()} –º–∞—à–∏–Ω—É –Ω–∞ {date_display} –≤ {time_slot}"
        
        keyboard = [
            [InlineKeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data='view_schedule')],
            [InlineKeyboardButton("üëÄ –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data='my_bookings')],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(success_text, reply_markup=reply_markup)
        
    except sqlite3.IntegrityError:
        await query.edit_message_text("‚ùå –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.")
    finally:
        conn.close()

async def my_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT id, machine_type, date, time_slot 
        FROM bookings 
        WHERE user_id = ? AND date >= date('now')
        ORDER BY date, time_slot
    ''', (user_id,))
    
    bookings = cursor.fetchall()
    conn.close()
    
    if not bookings:
        message = "üìã –í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π."
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]]
    else:
        message = "üìã –í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
        keyboard = []
        
        for booking_id, machine, date, time_slot in bookings:
            date_obj = datetime.strptime(date, "%Y-%m-%d")
            today = datetime.now().date()
            
            if date_obj.date() == today:
                date_display = "–°–µ–≥–æ–¥–Ω—è"
            elif date_obj.date() == today + timedelta(days=1):
                date_display = "–ó–∞–≤—Ç—Ä–∞"
            else:
                date_display = date_obj.strftime("%d.%m")
            
            message += f"üßº {machine} –º–∞—à–∏–Ω–∞\n"
            message += f"üìÖ {date_display} –≤ {time_slot}\n"
            message += "‚îÄ" * 20 + "\n\n"
            
            keyboard.append([InlineKeyboardButton(
                f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å {machine} {date_display} {time_slot}", 
                callback_data=f'cancel_booking_{booking_id}'
            )])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message, reply_markup=reply_markup)

async def cancel_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    booking_id = query.data.replace('cancel_booking_', '')
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute('SELECT machine_type, date, time_slot FROM bookings WHERE id = ? AND user_id = ?', (booking_id, query.from_user.id))
    booking = cursor.fetchone()
    
    if booking:
        machine, date, time_slot = booking
        cursor.execute('DELETE FROM bookings WHERE id = ? AND user_id = ?', (booking_id, query.from_user.id))
        conn.commit()
        
        date_display = "–°–µ–≥–æ–¥–Ω—è" if date == datetime.now().strftime("%Y-%m-%d") else \
                      "–ó–∞–≤—Ç—Ä–∞" if date == (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%d") else \
                      "–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞"
        
        keyboard = [
            [InlineKeyboardButton("üëÄ –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data='my_bookings')],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!\n\n"
            f"üßº –ú–∞—à–∏–Ω–∞: {machine}\n"
            f"üìÖ –î–∞—Ç–∞: {date_display}\n"
            f"üïê –í—Ä–µ–º—è: {time_slot}",
            reply_markup=reply_markup
        )
    else:
        await query.edit_message_text(
            "‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='my_bookings')]])
        )
    
    conn.close()

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    
    if data == 'main_menu':
        await start(update, context)
    elif data == 'view_schedule':
        await show_schedule(update, context)
    elif data == 'choose_machine':
        await choose_machine(update, context)
    elif data in ['book_new1', 'book_new2', 'book_old']:
        await handle_booking_choice(update, context)
    elif data == 'my_bookings':
        await my_bookings(update, context)
    elif data.startswith('confirm_'):
        await confirm_booking(update, context)
    elif data.startswith('cancel_booking_'):
        await cancel_booking(update, context)

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å—Ç–∏—Ä–∫—É...")
    init_db()
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_callback))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling()

if __name__ == "__main__":
    main()
